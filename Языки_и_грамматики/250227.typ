= Лекция 3.

== Грамматикирамматики

Иерархия грамматик Хомскаого

/ Утверждение 5.: Справедливы следующие:

2. Любая неукорачивающая КС-грамматика блять

== Иерархия языков

#image("imgs/001.png")

== Разбор цепочек

/ Цепочка: в алфавите $T$ принадлежит языку, порождаемому грамматикой $(T, N, P, S)$ только в том случае, если существует ее вывод из начального сивола $S$ этой грамматики.

/ Разбор: --- процесс построения такого вывода.

Построение вывода можно осуществить и в обратном порядке: в исхоной цепочке ищем вхождение в неё правой части некоторого правила и заменяем его на левую часть (делаем свёртку).

- В итоге исходная  цепочка "сворачивается" к некотрой сентенинциальной форме. Затем идет следующая свертка и т.д., пока не придем к $S$

/ Анализ: --- описанный выше процесс разбора снизу вверх.

=== Пример

$ G_"expr" = <{a, b, +}, {S, T}, {S -> T | T + S: T -> a | b}, S>$

Можно построить разные выводы для цепочки $a + b + a$:
+ $S -> T + S -> T + T + S -> T + T + T -> a + T + T -> a + b + T -> a + b + a$
+ $S -> T + S -> a + S -> a + T + S -> a + b + S -> a + b + T -> a + b + a$
+ $S -> T + S -> T + T + S -> T + T + T -> T + T + a -> T + b + a -> a + b + a$

Дерево разбора выглядит так:

#image("imgs/002.png")

Когда мы займёмся КС-грамматиками, мы много будем говорить о деревьях. На вышенарисованном листья --- символы выведенной цепочки, а промежуточные узлы --- это нетерминальные символы.

Пошагово дерево можно отобразить так:

#image("imgs/003.png")

== Регулярные множества, их распознавание и порождение

Введение в грамматики закончилось, мы начинаем изучать классы языков и грамматик по отдельности. Начнём с самого простого класса языков --- языков типа 3, также называемых регулярными. Почему они так называются? Сейчас узнаем.


/ Опр.: Пусть $Sigma$ --- конечный алфавит. Регулярное множество в алфавите $Sigma$  оперделяется следующим образом:

+ $emptyset$ --- регулярное множество в алфавите $Sigma$
+ ${epsilon}$ --- регулярное множество в алфавите $Sigma$
+ ${a}$ --- регулярное множество в алфавите $Sigma$ $space forall a in Sigma$
+ Если  $Q$ и $R$ --- регулярные множества в алфавите $Sigma$, то множества $Q union P$, $Q P$ и $P\*$ регулярные.
+ Ничто другое не является регулярным множеством в алфавите $Sigma$

Попробуем посмотреть на пример.

Пусть задан алфавит \
$Sigma = {a, b}$ \
и язык \
$ L  = { (a b)^n : n gt.eq 1 } $

Как нам определить, является ли множество строк $a b, a b  a b, dots$ частью языка? Для этого нам надо показать, что по заданным правилам мы можем построить это множество.

Из алфавита $Sigma$ мы можем построить два множества \
${a}, {b}$, \
а затем сделать их конкатенцию: \
$ { a }, { b } => { a b } $

Возьмём итерацию ${ a b }^*$ и получим загаданное множество.

Но дело в том, что описание, аналогичное $L$, не всегда возможно для регулярных множеств. Тогда как нам просто и компактно описать это бесконечное множество? Для этого существуют *регулярные выражения*.


Perl-синтаксис регулярных выражений не полностью соответствует тому, который мы будем разбирать сейчас, потому что там он является расширенным и имеет дополнительные синтаксические конструкции, строящиеся на основе уже разбираемого нами синтаксиса.


== Регулярные выражения

/ Опр.: Пусть $Sigma$ --- конечный алфавит. Определим рекурсивно _регулярное выражение в алфавте_ $Sigma$ и регулярные множества, которые они обозначают.

Базис индукции:
+ $emptyset$ --- регулярное выражение, обозначающее регулярное множество $emptyset$
+ $epsilon$ --- регулярное выражение, обозначающее регулярное множество ${epsilon}$
+ $a in Sigma$ --- регулярное выражение, обозначающее регулярное множество ${a}$

Индукция:

Если $alpha$ и $beta$ --- регулярные выражения, обозначающие регулярные множества $Q$ и $P$ соответственно, то:
+ $(alpha + beta)$ --- регулярное выражение, обозначающее $Q union P$
+ $(alpha beta)$ --- регулярное выражение, обозначающее $Q P$
+ $(beta)^\*$ --- регулярное выражение, обозначающее $P^\*$

Никаких других регулярных выражений, кроме тех, что построены в соответствии с описанным определением, нет.

_Скобки в приведённых примерах являются элементами определения регулярного выражения. Они могут опускаться подобно тому, как они опускаются в арифметике. Так, если операция итерации применяется к единственному символу $beta$, скобки можно опустить._

$ (a b)^\+ $

/ Лемма1: Если в $alpha, beta, gamma$ --- регулярные выражения, то справедливы следующие соотношения:

1. $alpha + beta = beta + alpha$
2. $alpha + (beta + gamma) = (alpha + beta) + gamma$
3. $alpha(beta + gamma)$ = $alpha beta + alpha gamma$
4. $alpha epsilon = epsilon alpha = alpha$
5. $alpha\* = alpha + alpha\*$
6. $alpha + alpha = alpha$
7. $emptyset^\* = epsilon$
8. $alpha (beta gamma) = (alpha beta) gamma$
8. $alpha(beta gamma) = (alpha beta gamma)$
9. $(alpha + beta)gamma = alpha gamma + beta gamma$
10. $emptyset alpha = alpha emptyset = emptyset$
11. $(alpha^\*)^\* = alpha^\*$
12. $alpha + emptyset = alpha$

/ Доказательство: Пусть $alpha, beta$ обозначают множества $Q$ и $P$ соответственно. Тогда $alpha + beta$ обозначают $Q union P$, а $beta + alpha$ --- $P union Q$

Но $ Q union P = P union Q$.  Следовательно, $alpha + beta = beta + alpha$.

Эти тождества помогают при построении регулярных выражений: мы абстрагируемся от множеств и правил их преобразования, пользуясь уже доказанными тождествами. Поэтому превая задача, которая для нас присутствует, --- это упрощение регулярного выражения.

=== Пример преоразования RE
 
Пусть язык задан регулярным выражением:
$L = (0\* + epsilon)\*(1+1^+)$

Имеем:

1. $0^\* = 0^+ + epsilon => L = (((0^+ + epsilon) + epsilon)^\*(1 + 1^+))$
2. $L = (0^\+  epsilon + epsilon)^\* (1 + 1^\+)$ (опустили скобки)
3. $L = (0^\+ + epsilon)^\* (1 + 1^\+)$
4. $L = (0^\*)^\*(1 + 1^+)$
5. $(0^*)^* = 0^* => L = 0^\* (1 + 1^*)$
6. $1 dot 1^\* = 1^+ => L = 0^\* 1(epsilon + 1^\*)$ (т. к. $1 ( limits(union.big)_(i = 0)^infinity 1^i)$)
7. $L = 0^\* 1 1^\*$
8. $1 dot 1&\* = 1^+ => L = 0^\* 1^\+$

$ L = { 0^n 1^m | n gt.eq 0, m gt.eq 1 } $

*Такая задача будет в кр*

*Контрольная работа будет через неделю после того как завершим тему "Регулярные выражения"*

=== Примеры регулярных выражений

$Epsilon = {0, 1}$
- $L(01) = {01}$
- $L(01 + 0) = {01, 0}$
- $L(0(1+0)) = {01, 00}$
- $L(0^\*) = {epsilon, 0, 00, 000, dots}$
- $L((0+10)^\*(epsilon+1)) =$ все строки из 0 1 и без двух последовательных 1

Фактически регулярные выражения задают шаблоны строк. В языках программирования такая технология широко используется.

*Примеры* регулярных выражений над алфавитом ${a, b}$:

$ a + b, (a + b)^\*,  (a a, (a b)^&\* b b)^\*$

Соответствующие языки:
- $L(a + b) = {a} union {b} = {a, b}$
- $L((a+ +  bb)^\*) = {a, b}^\*$
- $L((a a (a  b)^\* b b)^\*)  = { a a a b b b, dots }$
// гг 3 пункту
// живём живём

== Уравнения с регулярными коэффициентами

Есть три способа задания языков:
+ Регулярные выражения
+ Прямолинейные грамматики
+ Конечные автоматы

#image("imgs/004.png")

_Доказательство выводимости регулярного выражения из конечного автомата существует, но оно настолько неприятно, что им пользуются только постоянные клиенты психоневрологического диспансера и изолятора_

Рассмотрим уравнение $X = a X - b$? где $a$ и $b$ --- $P B$

$ X = a^\* b "- решение уравнения:" $
$ a^\* b = a a^\* b + b $
$ a^\* b = (a a^\* + epsilon) b $
$ a^\* b = a\^* b $

Если множество, определяемое рег. выражением $a$, содержит $epsilon$, то уравнение имеет бесконечно много решений $X = a^\* (b + c)$ для любого $P B$ с.

В этом случае берут _"наименьшее решение"_ --- *наименьшую неподвижную точку*

== Система уравнений с регулярными коэффициентами


/ Опр.:  Система уравнений с рег. коэффициентами называется *стандартной системой* с множеством неизвестных $Delta = {X_1, X_2, ..., X_n}$, если она имеет вид:

$
	x_1 = a_(10) X_1 + a_(12) X_2 + dots + a_(1 n) X_n \
	dots dots dots dots dots dots dots dots dots dots dots dots dots dots dots /* skibidi dots dots yes */ \
	x_n = a_(n 0) X_1 + a_(n 2) X_2 + dots + a_(n n) X_n,
$
где все $a_(i j)$ --- регулярные выражения в алфавите, не пересекающимся с $Delta$.

Если $a_(i j) = emptyset$? то соответствующее слагаемое соответствует. \
Если $a_(i j) = epsilon$, то слагаемое равно $X_j$.



// Install dependensis for ububntu репа моя на гите качай как там 

_Метод_ (см. решение СЛУ методом Гаусса)

Шаг 1. $i = 1$

Шаг 2. Если $i = n$, перейти к шагу 4. \
Иначе, с помощью тождеств регулярных выражений записать уравнение для $X_i$ в виде $X_i = alpha X_i = beta$, где $alpha$ --- регулярное выражение в алфавите $Sigma$, а $beta$ --- регулярное выржажение вида $beta_0 + beta_i X_(i + 1) + dots + beta_n X_n$, $b_i$ --- регулярное выражение в алфавите $Sigma$. \
Затем, в правых частях уравнений для $X_(i + 1) .....................................$ // TODO: BLYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT


Шаг 3. $i = i + 1$ Перейти к шагу 2.

Шаг 4. Записать уравнение для $X_n$ в виде $X_n = alpha X_n + beta$, где $alpha$ и $beta$ // TODO: BLYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT


_Определение_. Отображение $f$ множества $Delta$ в множество языков в алфавите $Sigma$ называют _решнием системы_ $Q$, если после подстановки в каждое уравнение $f(x)$ вместо $X$ для каждого $X in Delta$ получаем тождества.

#image("imgs/005.png")

// TODO: БЛЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯ последнее предложение не успел

Пусть система имеет вид:

$
    X_1 = 0 X_2 + 1 X_1 + epsilon\
    X_2 = 0 X_3 + 1 X_2\
    X_3 = 0 X_1 + 1 X_3
$
Рассмотрим первое уравнение:

$X_1 = 1 X_1 + 0 X_2 + epsilon \
X = a X + b \
X = a^\* b \
\
X_1 = 1^+ (0 X_2 + epsilon) #par[в явном виде выписали решение для $X_1$] \
X_2 = 0 X)3 + 1 X_2 \
X_3 = 0 1^\* 0 X_2 + 0 1^\* + 1 X_3
$


- Второе уравнение представим в виде $ X_2 = 1^\* 0 X_3$ подставим в третье уравнени

$X_2 = underbrace(1, a) X_2 + underbrace(0 X_3, b) \
X_2 = 1^\* 0 X_3
$

    Получим:
    $
        X_1 = 1^\* 0 X_2 + 1^\*\
        X_2 = 1^\* 0 X_3\
        X_3 = 01^\* 01^\* 0 X_3 + 01^\* + 1X_3
    $

// NOTE: Это не реально записывать блятть (похуй сколько людей)
// это пиздец просто
// дед ебёт всех чисто одним слайдом

/ Лемма2: Каждая стандартная система уравнений $Q$ с незивестными $Delta$ обладает единственной наименьшей неподвижной точкой.

_Доказательство_:

Пусть $f(X) = {w | w in g(X) forall " решений " g " системы " Q} forall X in Delta$.

// После начинай рисовать я допишу

Очевидно, что $f(x)$ -- решение и $(forall X)f(X) subset.eq g(X)$

Таким образом, $f$ --- единственная наименьшая неподвижная точка системы $Q$

#image("imgs/006.png")

/ Теорема: Алгоритм назодит наименьшую неподвижную точку стандартной системы уравнений.

*Док-во*:

После применения шага 5 $forall$ // NOTE: ДА БЛЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯ

== Регулярные множества и праволинейные грамматики

Язык определяется праволинейной граамматикой т. и. т. т., когда оон является регулярным множеством.



/ Лемма 3: Множества $emptyset$, ${epsilon}$ и $alpha$ для всех $alpha in Sigma$ являются праволинейными языками

_Доказательство_:

1. $G = ({S}, Sigma, P, S)$ --- праволинейная грамматика, для которой $L(G) = emptyset$
2. $G = ({S}, Sigma, {S -> epsilon}, S)$ --- праволинейная грамматика, для которой $L(G) = {epsilon}$
3. $G_a = ({S}, Sigma, {S -> alpha}, S)$ --- праволинейная грамматика для которой $L(G_a) = {a}$

// NOTE: Строка --- глубокий горловой минет

/ Лемма 4: $P$ и $Q$ --- праволинейные языки $=>$ языки $P union Q, P Q, P^\*$ тоже праволинейные.

Док-во:

Т.к. $P$ и $Q$ --- праволинейные, то $exists$ праволинейные грамматки

$G_P = (N_1 Sigma, P_1, S_1)$ и $G_Q = (N_2, Sigma, P_2, S_2)$, для которых $L(G_P) = P$ и $L(G_Q) = Q$. Считаем, что $N_1 sect N_2 = emptyset$.

1. $G_3 = (N_1 union N_2, Sigma, P_1 union P_2 union {S_3 -> S_1 | S_2}, S_3) $ --- // TODO: Дальше на фотке 



Так как $G_3$ праволинейная грамматика, то $L(G_3)$ --- праволинейный язык.






