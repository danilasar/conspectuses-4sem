= Лекция ... 7 апреля 2025

== Отсечение
$
z = - n e a r\
(x', y', - n e a r)\
$

// я нихуя не понимаю че мне писать
// ща формулы пойдут, запишем. А пока слушаем.. Может чуткак
// ок
// бля задержка пиздец, реально надо писать отдельно иначе пизда
// пиздец он быстрый

$
(x_1, y_1, z_1)\
(x_2, y_2, z_2)\
$

// СПАСИБО СЕРГЕЙ ВЛАДИМИРОВИЧ
// АВЕ СЕРГЕЙ ВЛАДИМИОВИЧ
// ахаххахахах ага


// 102
== Отсечение видимых частей сцены
#image("imgs/102.png")
/ Контурное изображение: ---  изображение заденное гранями

// Передай Робу: "Можешь достать графический планшет и ручку к нему, пожалуйста, из моего рюкзака? Планшет лежит в громадном отделении, а ручка от него в нижнем чёрном кармане"


== Отсечение
// без синего квадрата
#image("imgs/103.png")

// с синим квадратом
#image("imgs/104.png")

Если наблюдатель смотрит прямо на синюю сторону куба, то он увидит только синий квадрат. В случае с перспективой нам нужно также понять, какие точки многоугольников видны. В ортогональной проекции это было относительно тривиальной операцией, а сейчас задача на порядок сложнее, но алгоритмически разрешается.

Для проведения такого отсечения граней мы вводим между системой координат наблюдателя и системой координат экрана ещё одну систему координат --- *систему координат пространства отсечения*.

// нихуя за вами не успеваю((((


// снова без него, но с пунктиром от O до красного квадрата
#image("imgs/105.png")

// и то же уже с ним
#image("imgs/106.png")

== Пространство отсечения
// триколор
#image("imgs/107.png")

/ Система координат пространства отсечения: --- это специальная промежуточная система координат, в которой отсечение объектов и определение, каким цветом закрашивать ту или иную точку на экране будет проводитсья по принципу прямоугольной проекции. "Нашу сцену запаковали в некоторый куб, из которого можно перейти в систему координат экрана".

Чтобы опредлелить, что ближе, а что дальше, мы проведём для каждой точки перспективную проекцию. У нас всё сплющилось, но мы ещё не проводили отсечение.

// триколор без куба
#image("imgs/108.png")

// кривой куб
#image("imgs/109.png")

В результате координаты $x$ и $y$ изменились в соответствии с перспективным преобразованием, но мы пока ещё оставили координату $z$ --- она поможет нам определять, что ближе, а что дальше.

=== Пирамида видимости
// с пунктирными границами
#image("imgs/110.png")

// со сплошными границами
#image("imgs/111.png")
// Я нихуя не успеваю за ним
// смирись
// я просто слайды переношу, мы всё равно нихуя не поймём


// без человека
#image("imgs/112.png")


#image("imgs/113.png")

// в системе координат
#image("imgs/114.png")

Ограничим кубом от -1 до 1 по всем осям

Чтобы ограничить видимое пространства, вводим ещё и близость горизонта, находящуюся на расстоянии $"near"$.

Пирамиду видимости (пирамиду фрустум) мы хотим преобразовать в куб таким образом, чтобы окно наблюдения преобразовалось в одну из граней куба. Соотвествующим образом должно сжаться содержимое.

В итоге, каким бы ни было огромным окно обзора, оно становится квадратом $2 times 2$. Мы намеренно исказили наши объекты (по законам перспективы), а затем измеряем глубину. Чем больше $z$, тем дальше точка от наблюдателя. Теперь остаётся отсечь невидимые грани, что уже не является такой сложной операцией.

Как будем проводить это преобразование. Пока кроме $V_x , V_y$ нам ничего не надо было. Но теперь введем...

У нас окно ограниченно от left до right от top до bottom


// HACK: "Ой, розовенькое" --- Сергей Владимирович Миронов, декан факультета компьютерных наук и информационных технологий


// просто пирамида
#image("imgs/115.png")

// снова куб
#image("imgs/116.png")

Обратим внимание на необходимость развернуть ось $O z$ в противоположную сторону.

// куб с координатами вершин
#image("imgs/117.png")

// он же без системы координат
#image("imgs/118.png")

== Переход в пространство отсечения
// куб с пирамидой
#image("imgs/119.png")


// розовый экран в пирамиде
#image("imgs/120.png")


Левая верхняя точка окна наблюдения должна перейти в точку $(1, 1, -1)$. Соответсвтенно правая нижняя точка станет $(1, -1, -1)$. По аналогии можно такое же с $"far"$ проделать, но нам это на самом деле не нужно.

$
x' = "near" x/(-z) \
y' = "near" x/(-z)
$

$
x'' = ((#[near] x)/(-z) - #[left])/(#[right] - #[left]) dot 2 - 1\
y'' = ((#[near] y)/(-z) - #[bottom])/(#[top] - #[bottom]) dot 2 - 1\
$

$
x'' = ((#[near] x + z #[left])/(-z))/(#[right] - #[left]) dot 2 - 1\
x'' = ((#[near] x + z #[left])/(#[right] - #[left]))/(-z) dot 2 - 1\
x'' = (((#[near] x + z #[left]) dot 2)/(#[right] - #[left]) + z)/(-z)\
// раскрыли скобки, посокращали и получили
x'' = ((2 x #[near])/(#[right] - #[left]) + (z (#[right] + #[left]))(#[right] - #[left]) )/(- z)
$

Аналогично для $y$

$
mat(delim: "[",
	chi'';
	gamma'';
	zeta'';
	alpha''
)= mat(delim: "[",
	a_11, a_12, a_13, a_14;
	a_21, a_22, a_23, a_24;
	a_31, a_32, a_33, a_34;
	a_41, a_42, a_43, a_34;
) = mat(delim: "[",
	x;
	y;
	z;
	1
)
$

/*$ // хз мб пригодится
x' = (x' - #[left])/(#[right] - #[left]) dot 2 - 1\
y' = (y' - #[bottom])/(#[top] - #[bottom]) dot 2 - 1\
z' = (z' - #[near])/(#[far] - #[near]) dot 2 - 1\
$*/
// че деалть будем

// ориентируйся по заголовкам и комментариям к картинкам
// По картинкам сложна, но по загаловкам ок

// От меня что-то надо? Если что тыкай меня в тг. 
// я хуй знает что делать
// можешь просто пытаться понять происходящее)
// ок
/*$
(#[left], #[top], #[-near])\
(#[right], #[bottom], #[-near])
$*/

// пирамида и куб порозовели
#image("imgs/121.png")

// куб отъебнул
#image("imgs/122.png")

// выкладки
#image("imgs/123.png")
#image("imgs/124.png")
#image("imgs/125.png")
#image("imgs/126.png")

== Матрица перспективного преобразования
#image("imgs/127.png")


Мы хотим добиться того, чтобы было $alpha'' = -z$.

// a'' = -z
#image("imgs/128.png")

Получается, что у нас последняя строка $mat(0, 0, -1, 0)$.

// убрали многоэтажные дроби
#image("imgs/129.png")

// подставили их в матрицу
#image("imgs/130.png")

// рисунок с кубом
#image("imgs/131.png")

// рисунок без куба
#image("imgs/132.png")

// рисунок с кривым кубом
#image("imgs/133.png")

// снова матрица
#image("imgs/134.png")

// кусок матрицы порозовел
#image("imgs/135.png")

// выкладки для xi, alpha, z
#image("imgs/136.png")

// вернулись к розовым кубам да пирамидам
#image("imgs/137.png")

Как мы будем всё это определять? На самом деле мы не обязаны растягивать одновременно. Нам это не нужно. Нам важно, что если одна точка  с коордиднатой $z$ была ближе другой, то она должна остаться и выжить. Всё остальное нас не волнует.

То есть плоскость наблюдения должна перейти в плоскость $z = -1$. Это наше первое пограничное условие.

Второе условие: плоскость горизонта должна превратиться в $z = 1$.

// продолжаем выкладки =>
Подставляем в формулы $"far"$ и $"near"$:
#image("imgs/138.png")

У нас получилась система уравнений с двумя неизвестными. Вычтем из первого уравнения второе и что получится?

$
	a_34/(-"far") - a_34/(-"near") = -2 \
	a_34 ("far" - "near")/(-"far" dot "near") = 2 \
	a_34 = frac(-2 dot "far" dot "near", "far" - "near")
$

Коэффициент $a_34$ мы нашли. Если мы вернёмся обратно, то мы сможем найти $a_33$:
#image("imgs/139.png")


#image("imgs/140.png")
// матрица
#image("imgs/141.png")
// розовая матрица
#image("imgs/142.png")

Получившаяся матрица переводит фрустум в пространство отсечения и упакоывает её, за что мы заслуженно назовём её $"Frustum"("left", "right", "botton", "top", "near", "far")$

// наблюдаем за рёбрами куба
#image("imgs/143.png")

// смотрим не туда куда надо
#image("imgs/144.png")

// появился aspect
#image("imgs/145.png")

// появился fov y
#image("imgs/146.png")

// убрали хуйню
#image("imgs/147.png")

// зелёный треугольник (и слоник)
#image("imgs/148.png")

// зелёный слоник с выкладками
#image("imgs/149.png")

// голая матрица
#image("imgs/150.png")

// она же с выкладками снизу
#image("imgs/151.png")

// оптимизация матрицы
#image("imgs/153.png")

// оптимизация котангенсом
#image("imgs/154.png")

// опять розовая матрица
#image("imgs/155.png")

// я вставил это куда надо
// Ok
// 120 розовый переход в пространство отсечения
$
z = - f a r
$
$
V_(c x) = l e f t\
V_(c y) = b o t t o m\
V_x = r i g h t - l e f t\
V_y = t o p - b o t t o m
$

$
W_(c x) = - 1,\
W_(c y) = - 1,\
W_(x) = 2,\
W_(y) = 2,\

$

// Бедный данька, волнуется 
// Он как будто впервые лекцию видит. Вполне возможно


// Учитывайте, что задержка примерно в секунд 40 если вместе писать



