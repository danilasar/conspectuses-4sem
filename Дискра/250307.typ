= Лекция 4 (3 не было из-за др факультета). 07 марта 2025
== Комбинаторика разбиений

$ n_1 - 1 "т", n_2 - 2 "т", dots, n_k - k $

$ n_1 + 1)x dot (n_2 + 1)x dots x (n_k + 1) $


/ Следствие 1: $n_1 = n_2 = dots = n_k = 1$
// Чёто я в contr'y захотел поиграть на денди
/ Следствие 2: В каждый ящик не менее $S_i$ предметов $i$-ого типа ($i = overline("1,k")$).

$ (n_1 - 2 s_1 + 1) (n_2 - 2 s_2 + 1) dots (n_k -2 s_k + 1) $

Это число способов разложить все эти предметы так, чтобы в каждом ящике было не менее ... //то, что написано в следствии 2

== Задача.

$n$ различных предметов надо разложить в $k$ различных ящиков так, чтобы в первый ящик попало $n_1$ предметов, во второй ящик $n_2$ предметов, ... в $k$-ый ящик $n_k$ предметов.

$ n_1 + n_2 + dots n_k = n $

Давайте выложим $n$ различных предметов в один ряд. Теперь $n_1$ предметов в первый ящик и т.д.

$ underbrace(dots, limits(n_1)_(<-->)) space underbrace(dots, limits(n_2)_(<-->)) space dots space underbrace(dots, limits(n_k)_(<-->)) $

#image("imgs/004.png")

Нас не интересует порядок предметов внутри ящиков. Поэтому можно делать любые перестановки в отдельно взятых ящиках и получим то же самое распределение.

$n_1 ! n_2 ! dots n_k !$ --- количество всевозможных перестановок предметов в ящиках. Тогда число способов распределить предметы по ящикам будет равно количеству классов ($n_1, n_2, dots, n_k$): $n!/(n_1 ! n_2 ! dots n_k !)$

Так распределить ... можно таким числом способов: $n!/(n_1 ! n_2 ! dots n_k !)$


$ C_n^(n_1) C_(n - n_1)^n_2 dots C^(n_k)_(n - n_1 - n_2 - dots - n_k) $ // TODO: Дописать (вроде дописал по памяти, но лучше проверить)


*Задача*: Распределить кости домино между четырьмя игроками: каждому должно достаться по семь доминошек. Игроки есть ящики! Ответ будет такой: $(25!)/(7!)^4$

Давайте рассмотрим третью схему.

*Задача*: $n$ различных элементов раскладываются в $k$ одинаковых ящиков, то есть их должно попасть в каждый ящик поровну.

#image("imgs/005.png")

Если ящики одинаковые, то распределим по $n/k$ предметов в каждый из ящиков


$ k! ((n/k)!)^k $

$ (n!)/(k! (n/k)!)^k $

Посмотрим на четвёртую схему

=== Задача

Предположим что вы переезжаете на новую квартиру и у вас 30 книг, 5 коробок, в каждую помещается как раз 6 книг. Вам нужно перевезти 30 книг в новую квартиру.

#image("imgs/006.png")
// - а в чём вопрос? "Сколько способов распределить книги"?
// -  да
*Ответ* // TODO: это же ответ ???
$ (30!)/(5!(6!))^5 $

=== Задача

$n$ одинаковых предметов в $k$ ящиков

$ underbrace(1 space 1 space 1 space dots space 1, n) space underbrace(| space | space | space dots space |, k - 1) $

Просто берем все возможные перестановки с повторениями

#image("imgs/007.png")

$ overline(P) (underbracket(n, #[первый\ тип]), underbracket(k - 1, #[второй\ тип])) = ((n + k - 1)!)/(n! (k - 1)!) = C^(k - 1)_(n + k - 1) $

=== Задача

Имеется 10 шоколадок и 7 детей. Сколько существует способов распределить шоколадки?

#image("imgs/008.png")

$ overline(P) (10, 6) = (16!)/(10! dot 6!) $

/ Следствие 1:
// HACK:
// - что должно попасть?
// предметы в ящики
В каждый должно попасть не менее $r$ предметов
$ overline(P) (n - r k, k - 1) $

/ Следствие 2:

Распределение $n - k$ предметов по $k$ ящикам:

$ overline(P) (n - k, k - 1) = ((n - 1)!)/((n - k)! (k - 1)!) = C^(k -1)_(n - 1) $

Это можно записать как число сочетаний:

$ overline(P)(n - k, k - 1) = C_(n-1)^(k-1) $

== Схема 5
=== Задача

Рассмотрим пятую схему

$n$ предметов распределяются в $k$ различных ящиков. 

#image("imgs/009.png")

По правилу распредление это будет 

$ 1 space 2 space dots space n $
$ k dot k dot dots dot k = k $

// HACK:
// ВСЕ ЧТО НЕ ЗАПРЕЩЕНО --- РАЗРЕШЕНО

// HACK:
// А писать в строке товарища не запрещено?
// - Нельзя перебивать товарища, иначе можно получить по ебалу. От плагина или от товарища в зависимости от ситуации
// - Нет лучше станища чем строка товарища.

== Схема 6
=== Вариант 5 задачи
$n$ различных предметов распределяются в $k$ различных ящиков. Распределить так, чтобы не было пустых ящиков.

$ A_1, A_2, dots A_k $

$A_i$ --- исход с $i$-ым ящиком будучи пустым.

*Решение:*
$ k^n - C^1_k dot (k - 1)^n + C^2_k dot (k - 2)^n - C_k^3 (k - 3)^n + dots + (- 1)^k C^(k - 1)_k dot 1 $

Когда два ящика пусты, то предметы распределяются в $k - 2$ ящиков. Выкидываем такой случай. И так далее.

#image("imgs/010.png")

== Схема 7
Пусть у нас есть $n_1$ предметов первого типа, $n_2$ предметов второго типа, $dots$, $n_k$ предметов $k$го типа.

Число всевомзонжных способов распределения равно число способов разложить предметы первого типа, умноженное на число способо для второго и т.д.


// HACK:
// А этот тип сейчас с нами в одной комнате?)))))))))
// - Хочу кушать
// - Ну бля, терпи))

$ C_(n_1 + k + 1)^(k - 1) $ 
$ C_(n_1 + k + 1)^(k - 1) dot C_(n_2 + k + 1)^(k - 1) dot C_(n_3 + k + 1)^(k - 1) $

$ A_1, A_2, dots, A_k $

Поэтому мы заменяем на
$ |A_1|, |A_2|, dots, |A_k| $

Обозначение $quote.angle#[модуля]quote.angle.r$ это число предметов, а само $A_i$ --- множество.

Применяем 4 схему
$
  C_(n_1 + k + 1)^(k - 1) dot C_(n_2 + k + 1)^(k - 1) dot C_(n_3 + k + 1)^(k - 1) -\
	- C_k^1 dot  C_(n_1 + k - 2)^(k - 2) dot dots dot C_(n_3 + k - 2)^(k - 2) + \
  + C^2_k C^(k - 3)_(n_1 + k - 3) dot dots dot C_(n_3 + k -3)^(k - 3) -\
	- dots + (-1)^(k-1) C_k^(k - 1)
$

=== Задача

10 одинаковых яблок, 9 одинаковых апельсинов, 13 одинаковых мандаринов делятся между 4-мя детьми так, чтобы каждому из детей достался хотя бы один фрукт (решение выше и ниже в двух экземплярах, дети здесь играют роль ящиков).

Решение в общем виде:
$
  C_(n_1 + k + 1)^(k - 1) dot C_(n_2 + k + 1)^(k - 1) dot C_(n_3 + k + 1)^(k - 1) -\
	- C_k^1 dot  C_(n_1 + k - 2)^(k - 2) dot dots dot C_(n_3 + k - 2)^(k - 2) + \
  + C^2_k C^(k - 3)_(n_1 + k - 3) dot dots dot C_(n_3 + k -3)^(k - 3) -\
	- dots + (-1)^(k-1) C_k^(k - 1)
$

Пустые дети-ящики запрещены. Формула в общем виде написана выше, остаётся только подставить значения.

// HACK:
// вы не заметили, что мы втроём написали одно и то же?
// - ХАХАХХКХ
// - Ну думаю формулу имело смысл перетащить, чтобы путаницы не было

=== Задача

Распределятся $n$ различных предметов по $k$ различным ящиков с учётом порядка предметов внутри ящиков. Все $n$ предметов должны быть разложены. Могут быть и пустые ящики. 

$ 1 space 2 space 3 space dots space n underbrace(| space | space dots space |, k - 1) $

// HACK:
// Садится хохол в поезд, заходит в вагон, нашел свое купе. Открывает дверь, а там три негра сидят!
// Хохол:
// — Ой, хлопцы! А шо тут горело?


// TODO: Нужно форкнуть плагин TODO comments и добавить тег JOKE:)))
// HACK: выглядит как постирония

// чекни цвета тегов кста

#image("imgs/011.png")

$
2 space 1 space 3 dots n underbrace(| space | dots |, k - 1)
$

// HACK: Имба обводка
$ overline(P) (underbrace(1\, 1\, 1\, dots\, 1, k), k - 1) = ((n+k+1!))/(k-1)! = #h(5pt) A_(n + 1 - 1)^n  #[#h(-38pt) #circle(radius: 20pt)] $ 

// HACK:
// - Фига се Даня колдун
// теперь заебумба

Следствие: нет пустых ящиков

$ A_n^k dot A_(n - k + k - 1)^(n - k) = (n!)/((n - k)!) dot ((n - 1)!)/((k - 1)!) = n! C_(n - 1)^(k - 1) $

$ n! C^(k - 1)_(n - 1) $

== Последняя, девятая, схема

$n$ различных предметов ракладываются по $k$ различным ящикам, с учётом порядка предметов в ящиках и не все предметы могут использоваться при распределении.

Ещё раз: *НЕ ВСЕ* $n$ прдеметов! Ящики могут оставаться пустыми.

Хочется свести эту задачу к предыдушей.

Разрешается даже $0$ предметов разложить.

Давайте разделим решения на классы:

$S$: раскладывается ровно $S$ предметов, $S = overline(0\, n)$.

$ C^S_n dot A^S_(S + k - 1) $

$ limits(sum)^n_(s = 0) C^S_n dot A^S_(S + k - 1) $

=== Хрестоматийная задача (Задача на 8 схему).
// HACK:
// - Последний раз я слышал это слово в школе)
// - Последний раз я слышал это слово вчера...
// - Лучше бы я это никогда не слышал
Рассмотрим 6 сигнальны флажков по 3-м различным мачтам парусного судна. Порядок флажков на каждой мачте важен. Сколько сигналов может быть в такой флотской азбуке?

$ A^2_8 $

#image("imgs/012.png")

$ limits(sum)_(S = 0)^6 C^S_6 dot A^S_(S + 2) $

/ Следствие: Снова рассматриваем классы и здесь не должно быть пустых ящиков, т.е. не может быть классов с номерами меньше $k$.

$ limits(sum)_(S = k)^n C^S_n underbracket(S! C^(k - 1)_(S - 1), #[следствие\ из 8-го]) $


// HACK: Едут в купе русский, украинец, армянин. Проходит полчаса, надо знакомиться. Хохол протягивает руку, говорит:
// — Мыкола, запорожец.
// — Сергей, москвич — отвечает русский.
// Армянин с понтом так:
// — Ашот, БМВ.

Итого мы рассмотрели 8 схем --- шаблонных комбинаторных задач, к которым можно свести большинство остальных.


































































