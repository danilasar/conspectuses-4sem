= Лекция 3 25.02.2025

Опрос на всю пару (следующая пара).

Об этом говорили в прошлый раз:
```
Формируется базис из 3 примитивных функций ...



Задаются 3 ...
+ Супепрозиции
+
+
```

Понятие простейших функций

Числовые функции, значение которых можно установить посредством некоторого алгоритма называются вычислимыми функциями.

Для того чтобы описть класс функций с помощью рекурсивных определений рассмотим набор простейших функций:
+ $Z (x_1, x_2,..., x_n) = 0$ -- Нуль-функция, которая определена для всех неотрицательных значений аргумента.
+ $s(x) = x + 1$ -- функция непосредственного следования, также определенная для всех целых неотрицательных значений своего аргумента.
+ I^n_m(x_1,x_2,...,x_m,...,x_n) = x_m -- функция выбора (тождества), повторяющая значения своих аргументов.

Используя простейшие функции в качестве исходных функций, можно с помощью небольшого числа общих конструктивных приемов строить сложные арифметические функции. В теории рекурсивных функций особо важное значение имеют три операции: суперпозиции, примитивной рекурсии и минимализации.

*Эти операторы сохраняют вычислимость.*

Все элементарные функции -- всюду определенные и алгоритмически вычислимые.

== Оператор Супепрозиции

Оператором суперпозиции $S$ называется подстановка в функцию от $m$ переменных $m$ функций от $n$ одних и тех же переменных. Она дает новую от $n$ переменных. Например, из функций $f(x_1, x_2, ..., x_m),...$ $,f_m(x_1, x_2, ..., x_m)$ можно получить новую функцию: 

$ S^(m+1)(f,f_1,f_2,...,f_m) = g(x_1,x_2,...,x_n) = f(f_1(x_1,...,x_n),...,f_m(x_1,...,x_n)) $

В операции суперпозиции S^(m+1) индекс сверху указывает на число функций.

Таким образом, при помози оператора суперпозиции и функции выбора можно выразить любую подстановку функции в функцию.

===Свойства операции суперпозиции

+ Операция суперпозиции сохраняет свойство всюду определенности функций, т.е если $f(x_1,...x_n),...,f_m(x_1,...,x_n)$ всюду определены, то и $ g(x_1,...,x_n) $ всюду определена.
+ Операция суперпозиции сохраняет свойство алгоритмической вычислимости функций.


=== Примеры

Суперпозиция функций: 

$ f(x) = 0$ и $ g(x) = x + 1)$ получим функцию $ h(x) = g(f(x)) = 0 + 1 = 1 $

При суперпозиции функция g(x) с этой же функцией получим функцию $h(x) = g(g(x)) = x + 2 $. 

Используя подстановку и функции тождества, можно представлять и отождествлять аргументы в функции: 

$ f(x_2, x_1, x_3,...,x_n) = f(I^2_2(x_1,x_2),I^2_1(x_1,x_2), x_3,...,x_n); $

$ f(x_1,x_1,x_3,...,x_n) = f(I^2_1(x_1,x_2),I^2_1(x_1,x_2), x_3,...,x_n);) $

Таким образом, если заданы функции тождества и операторы суперпозиции, то можно считать заданными всевозможные операторы подстановки функций в функции, а также преименования, перестановки и отождествления переменных.


== Оператор примитивной рекурсии

Оператор примитивной рекурси задается следующим образом:

Рекурсия ведется по одному аргументу, все остальные считаются параметрами. Известны две функции: $g(x_1,...,x_n)$ и  $h(x_1,...,x_n, y, z)$.

/ Определение.: Говорят, что функция $f(x_1,...,x_n, y)$ получена из функции $g(x_1, ..., x_n)$ и $h(x_1, ..., x_n, y,z)$ с помощью операции примитивной рекурсии, если выполняются следующие равенства:

$f(x_1,...,x_n,0) = g(x_1,...,x_n)$


$f(x_1,...,x_n, y + 1) = h(x_1,...,x_n, y , f(x_1,...x_n, y))$


Это определение  имеет смысл, когда $n eq.not 0$, при этом записывается 

$f(x_1,...,x_n, y) = R(g(x_1,...,x_n),h(x_1,...,x_n,y,z))$

или сокращено

$ f = R(g, h) $

где $R$ --- означает оператор примитвной рекурсии.

В нуле функция $f$ равна функции $g$, а в некотрой  точке $y+1$ она орпделеяется через ихвестную функцию $h$ и значение в этой же функции в предыдущей точке.

Опрератором примитивной рекурсии $R_n$ позволяет определить $(n+1)$ --- местную функцию $f$   по двум заданным функциям, одна из которых является $n$-местной функцией $g$, а другая $(n+2)$-местной функцией $h$

Приведенная пара равенств называется схемой примитивной рекурсии. 

== Оператор примитивной рекурсии


*Основные свойства операции примитивной рекурсии.*

Операция примитивной рекурсии, так же как и операция суперпозиции, сохраняет свойство всюду опрделенности и алгоритмической вычислимости. т.е. если $g(x_1,...,x_n)$ и $h(x_1,...,x_n,y,z)$ всюду определенные и вычислимые функции, то $ f(x_1,...,x_n,y)$ тоже будет всюду определенная функция, где $ f = R(g,h) $. // супер блять


Всякая ПРФ является всюду определенной функцией.
Всякая ПРФ является алгоритмически вычислимой. 

- Функция называется примитивно-рекурсивной, если она является элементарной или может быть получена из элементарных функций с помозью конечного числа применений операторов тождества, суперпозиции и примитивной рекурсии.
- Если некоторые функции являются примитивно-рекурсивными, то в результате применения к ним операторов суперпозиции или примитивной рекурсии можно получить новые ...
- Существует три возможности доказательства того, что функция является примитивно-рекурсивной:
 *Здесь могла быть ваша реклама*
+ показать, что заданная функция является простейшей.
+ показать, что заданная функция построена с помощью оператора суперпозиции.
+ Показать, что заданная функция построена с помощью оператора примитивной рекурсии.


=== Примеры доказательства вычислимости функций

==== Функция-константа

$ f(x) = m$ $s(s(s...s(Z(x))...)) $ m-раз
Нуль-функция, функция следования и оператор суперпозиции.
==== Сложение
$ f(x, y) = x + y $
$ f(x, 0) = x $
$ f(x, y +1) = x +(y + 1) = (x + y) + 1 = f(x, y) +1 $

Доказательство:
- $f(x,0) = g(x) = x = l^1_1(x)$
- $f(x,y+1)=h(x,y,f(x,y))=s(l^3_3(x,y,f(x,y))) $
$ +^2 = R(l^1_1, [s; l^3_3]). $

==== Умножение

$ f(x,y) = x * y $
$ f(x,0) = x * 0 = 0; $
$ f(x, y + 1) = x * (y + 1) = x * y + x = f(x, y) + x $

Доказательство

- $ f(x,0) = g(x) = 0 = Z(x) $
- $ f(x, y + 1) = h(x,y,f(x,y)) = x + z = $



=== Симметрическая развностть (абсолютная величина разности)

$ x minus.dot = cases(
    x - y\, "если" x gt.eq y,
    o\, "если" x lt y
) $

Одноместная функция усеченного вычистания единицы определяется реурсивно:

$ f(0) = 0 minus.dot 1 = 0 = Z(x) $
...

$ f(x, 0) = x minus.dot 0 = x $
$ f(x, y + 1) = x minus.dot (y + 1) = (x minus.dot y) minus.dot 1 = f(x, y) minus.dot 1 $

Доказательство

$ f(x, 0) = g(x) = x = I^1_1(x) $
$ f(x, y + 1) = h(x,y, f(x,y)) = I^3_3(x,y,f(x,y)) minus.dot 1 $


$ minus.dot^2 = R (I^1_1, [minus.dot 1, I^3_3]) $

// Я рот ебал этого конспектирования блять

== Операции конечного суммирования и конечнгого произведения
/ Определение.: Говорят, что функция $sigma(x_1,..., x_n, z)$ получена из функции $g(x_1,..., x_n, y)$ с применением операции конечного суммирования, если для любого набора переменных $(x_1, x_2, ..., x_n, z)$ выполняется следующее равнество:

$ sigma(x_1,...,x_n,z) = g(x_1,...,x_n, 0) + g(x_1,...,x_n,1) + ... + g(x_1,...,x_n,z) = sum^z_(y=0) g(x_1,...,x_n,y) $

/ Определение.: Говорят, что функция $ delta(x_1,...,x_n,z)$ получена из функции $ g(x_1,...,x_n, y) $ с применением операции конечного произведения, если для любого набора переменных $(x_1,...,x_n, z) $ выполняется следующее равнество:
/* Доделать */
== Оператор минимизации

/ Оператор минимизации $M$ ($mu$-оператор): Пусть задана некоторая частичная функция $g(z, overline(x))$. В результате применения оператора минимизации мы получаем новую функцию, которая вычисляется следующим образом: $f(overline(x)) = y <=>$

....


== Использование оператора минимизации

*Используя минимизацию можно получать частично-определенные функции из всюду определенных функций*

=== Пример1

$ g(x, y) = |x - 2y| $
$ f(x) = mu y [g(x, y) = 0] = mu y[|x - 2y| = 0] $
Т.е.
$ f(x) = mu y [| x - 2 y| = 0] = x/2 $

=== Пример 2

=== Пример 3

== Тезис Черча

...

/ Тезис Черча (для частично рекурсивных функций): Класс алгоритмически вычислимых функций совпадает с классом всех частично рекурсивных функций. Принятие данного тезиса позволяет истолковывать доказательство, что некоторая функция не является частичо рекурсивной, как доказательство отсутствия алгоритма вычисления ее значений

Всякая функция, вычислимая с помощью машины Тьюринга, является частично рекусивной.

Всякая частично рекурсивная функция вычислима на машине Тьюринга

= Нормальные алгоритмы Маркова

== Определения

/ Алфавит: любое непустое множество символов. Его элементы называются буквами, а юбые последовательности букв --- словами. Пустое сово обозначается $and$

Если $A union B$ --- два алфавита, причем $A subset.eq B$, то алфавит $B$ называется расширением алфавита $A$.

/ Марковская подстановка: 

- Частными случаями марковских подстановок являются подстановки с пустыми словами: $(and, Q), (P, and), (and, and)$.
- Для обозначения марковской подстановки $(P,Q)$ используется ...

=== Пример марковских подстановок

// табличка

== Схема нормального алгоритма (Маркова) в алфавите $A$

Упорядочкнный конечный список формул подстановок в алфавите $A$ называется схемой нормального алгоритма в $A$.

$
cases(
    P_1 --> (.)Q_1\, ,
    P_2 --> (.)Q_2\, ,
    ....................,
    P_r --> (.)Q_r\, ,
)
$

Говорят, что _нормальный алгоритм_ перерабатывает слово $V$ в слово $W$. Последовательность$V i$, будем записывать следующим образом:

$ V 0 => V 1 => V 2 => ... => V m-1 => V m $

где $V 0 = V$ и $V m = W$


















